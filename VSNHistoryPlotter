#!/usr/bin/env python

import os
import pickle
import pyqtgraph as pg

from pyqtgraph.Qt import QtGui


class VSNHistoryPlotter:
    def __init__(self):
        self._cameras_histories = []
        self._win_activation = None
        self._win_percentage = None
        self._win_activation_binary = None

        self._load_data()
        self._create_graph_window()
        self._add_graphs_activation()
        self._add_graphs_percentage()
        self._add_graphs_activation_binary()
        self._print_power_mode()

    def _create_graph_window(self):
        # set default background color to white
        pg.setConfigOption('background', 'w')
        # open the plot window, set properties
        self._win_activation = pg.GraphicsWindow(title='VSN history plotter activity')
        self._win_activation.resize(1750, 1000)

        self._win_percentage = pg.GraphicsWindow(title='VSN history plotter percentage')
        self._win_percentage.resize(1750, 1000)

        self._win_activation_binary = pg.GraphicsWindow(title='VSN history plotter activity')
        self._win_activation_binary.resize(1750, 1000)

    def _load_data(self):
        for history_file_name in [file_name for file_name in os.listdir('.') if file_name.find('picam') != -1]:
            with open(history_file_name, mode='rb') as file:
                camera_history = pickle.load(file)
                self._cameras_histories.insert(camera_history.camera_id - 1, camera_history)

    def _add_graphs_activation_binary(self):
        for camera_history in self._cameras_histories:
            camera_name = 'picam' + str(camera_history.camera_id).zfill(2)
            data = camera_history.activation_level_history
            activation_level_binary_history = []
            for value in data:
                if value >= 15:
                    activation_level_binary_history.append(1)
                else:
                    activation_level_binary_history.append(0)

            self._win_activation_binary.nextRow()
            cam_plot = self._win_activation_binary.addPlot(title=camera_name)
            curve = cam_plot.plot(pen=pg.mkPen('r', width=2))
            cam_plot.setXRange(0, len(data))
            cam_plot.setYRange(0, 2)
            curve.setData(activation_level_binary_history)

    def _add_graphs_activation(self):
        for camera_history in self._cameras_histories:
            camera_name = 'picam' + str(camera_history.camera_id).zfill(2)
            self._win_activation.nextRow()
            cam_plot = self._win_activation.addPlot(title=camera_name)
            curve = cam_plot.plot(pen='r')
            cam_plot.setYRange(0, 100)
            data = camera_history.activation_level_history
            curve.setData(data)

    def _add_graphs_percentage(self):
        for camera_history in self._cameras_histories:
            camera_name = 'picam' + str(camera_history.camera_id).zfill(2)
            self._win_percentage.nextRow()
            cam_plot = self._win_percentage.addPlot(title=camera_name)
            curve = cam_plot.plot(pen='r')
            cam_plot.setYRange(0, 100)
            data = camera_history.percentage_of_active_pixels_history
            curve.setData(data)

    def _print_power_mode(self):
        for camera_history in self._cameras_histories:
            camera_name = 'picam' + str(camera_history.camera_id).zfill(2)
            print(camera_name +
                  ': ' +
                  'low power ticks: ' +
                  str(camera_history.ticks_in_low_power_mode) +
                  ', ' +
                  'normal operation ticks: ' +
                  str(camera_history.ticks_in_normal_operation_mode) +
                  '\r\n')


if __name__ == '__main__':
    history_plotter = VSNHistoryPlotter()

    QtGui.QApplication.instance().exec_()
