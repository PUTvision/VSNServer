#!/usr/bin/env python

import sys
import time
import asyncio
import numpy as np
import cv2

try:
    from PyQt4.QtCore import *
    from PyQt4.QtGui import *
except ImportError:
    sys.exit('PyQt4 is required to run server app')

from quamash import QEventLoop
from pyqtgraph.Qt import QtGui, QtCore

from server.VSNServer import VSNServer
from common import VSNPacket
from common.VSNUtility import Config, ImageType
from server.VSNGraph import VSNGraphController
from server.VSNCameras import VSNCameras
from connectivity import multicast

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s


class LogWidget(QTextBrowser):
    def __init__(self, parent=None):
        super(LogWidget, self).__init__(parent)
        palette = QPalette()
        palette.setColor(QPalette.Base, QColor('#ddddfd'))
        self.setPalette(palette)

# TODO:
# ability to change gain and sample time on the fly


class SampleGUIServerWindow(QMainWindow):
    def __init__(self, event_loop: asyncio.BaseEventLoop, parent=None):
        self.__server = None
        self.__broadcasting_server = multicast.Server()

        super(SampleGUIServerWindow, self).__init__(parent)

        self.__status_monitor_vbox = None

        self.__graphs_controller = None
        self.__plot_timer = QtCore.QTimer(self)

        self.create_main_frame()
        self.create_server()
        self.create_graphs()

        self.__cameras = VSNCameras()
        self.__existing_cameras = set()

        self.__event_loop = event_loop
        self.__no_clients_left = True
        self.__exit_requested = False

    def __add_new_camera(self, client):
        self.__cameras.add_camera(client)

        if client.id not in self.__existing_cameras:
            self.__graphs_controller.add_graph(client.id)

            camera_name = 'picam' + str(client.id).zfill(2)
            self._picam_labels[camera_name] = QtGui.QLabel()
            self._picam_labels[camera_name].setText(camera_name + ': ')
            self.__status_monitor_vbox.insertWidget(client.id, self._picam_labels[camera_name])
            self.combo_box_cameras.insertItem(client.id - 1, camera_name)

            self.__existing_cameras.add(client.id)

    def __create_status_monitor(self):
        self.__status_monitor_vbox = QtGui.QVBoxLayout()

        self._picam_labels = {}

        label_description = QtGui.QLabel('picam_name\t' +
                                         'active_pixels\t' +
                                         'activity_level\t' +
                                         'neighbours\t' +
                                         'gain\t' +
                                         'sample_time\t' +
                                         'low_power_ticks\t' +
                                         'normal_ticks'
                                         )
        self.__status_monitor_vbox.addWidget(label_description)

        return self.__status_monitor_vbox

    def __update_status_monitor(self, camera_number):
        camera_name, \
        active_pixels, \
        activation_level, \
        neighbours, \
        gain, \
        sample_time, \
        low_power_ticks, \
        normal_ticks = self.__cameras.get_status(camera_number)

        status = camera_name + '\t\t' + \
                 '{:.2f}'.format(active_pixels) + '\t\t' + \
                 '{:.2f}'.format(activation_level) + '\t\t' + \
                 '{:.2f}'.format(neighbours) + '\t\t' + \
                 '{0: <3}'.format(gain) + '\t' + \
                 '{:.2f}'.format(sample_time) + '\t\t' + \
                 '{0: <4}'.format(low_power_ticks) + '\t\t' + \
                 '{0: <4}'.format(normal_ticks)

        self._picam_labels[camera_name].setText(status)

    def create_server(self):
        self.__server = VSNServer(
            Config.server['listening_address'],
            Config.server['listening_port'],
            self.on_client_connection_made,
            self.on_client_connection_lost,
            self.on_no_clients_left,
            VSNPacket.ServerPacketRouter(self.on_client_data_received, self.on_client_configuration_received)
        )
        self.log('Waiting for connections...')

    def create_main_frame(self):
        # first row
        hbox_row_1 = QHBoxLayout()

        self.log_widget = LogWidget()
        self.label_image = QLabel()
        myPixmap = QtGui.QPixmap(_fromUtf8('Crazy-Cat.jpg'))
        myScaledPixmap = myPixmap.scaled(self.label_image.size(), Qt.KeepAspectRatio)
        self.label_image.setPixmap(myScaledPixmap)

        hbox_row_1.addWidget(self.log_widget)
        hbox_row_1.addWidget(self.label_image)

        # second row
        hbox_row_2 = QHBoxLayout()

        self.combo_box_cameras = QComboBox()

        image_types = ['foreground', 'background', 'difference']
        self.combo_box_image_types = QComboBox()
        self.combo_box_image_types.addItems(image_types)

        self.button_choose = QPushButton('Send settings')
        self.button_choose.clicked.connect(self.on_choose_clicked)

        self.save_history_button = QPushButton('Save history')
        self.save_history_button.clicked.connect(self.on_save_history)

        self.clear_history_button = QPushButton('Clear history')
        self.clear_history_button.clicked.connect(self.on_clear_history)

        hbox_row_2.addWidget(self.combo_box_cameras)
        hbox_row_2.addWidget(self.combo_box_image_types)
        hbox_row_2.addWidget(self.button_choose)
        hbox_row_2.addWidget(self.save_history_button)
        hbox_row_2.addWidget(self.clear_history_button)

        # TODO: add combo box and QLineEdit to set all the parameters

        vbox = QtGui.QVBoxLayout()
        vbox.addLayout(hbox_row_1)
        vbox.addLayout(hbox_row_2)

        vbox.addLayout(self.__create_status_monitor())

        main_frame = QWidget()
        main_frame.setLayout(vbox)

        self.setCentralWidget(main_frame)

    def create_graphs(self):
        self.__graphs_controller = VSNGraphController()

        self.__plot_timer.timeout.connect(self.__graphs_controller.update_graphs)
        self.__plot_timer.start(200)

    def on_choose_clicked(self):
        try:
            self.__cameras.choose_camera_to_stream(self.combo_box_cameras.currentText())
            self.__cameras.set_image_type(self.combo_box_cameras.currentText(),
                                          ImageType[self.combo_box_image_types.currentText()])
        except KeyError:
            print('%s is not available' % self.combo_box_cameras.currentText())

    def on_save_history(self):
        self.__cameras.save_cameras_data_to_files()

    def on_clear_history(self):
        self.__cameras.clear_cameras_data()

    def on_client_connection_made(self, client):
        self.log('Client connected')
        self.__no_clients_left = False

        if Config.clients['hostname_based_ids']:
            client.send(VSNPacket.ConfigurationPacketToClient(image_type=
                                                              ImageType[self.combo_box_image_types.currentText()]))
        else:
            client.send(VSNPacket.ConfigurationPacketToClient(client.id))
            self.__add_new_camera(client)

    def on_client_connection_lost(self, client):
        self.log('Client %i disconnected' % client.id)

    def on_no_clients_left(self):
        if self.__exit_requested:
            self.__server.stop()
            self.__event_loop.stop()
        else:
            self.__no_clients_left = True

    def on_client_data_received(self, client, packet: VSNPacket.DataPacketToServer):
        self.log('Received data from client %i' % client.id)

        self.service_client_data(
            packet.white_pixels,
            packet.activation_level,
            client
        )

        if packet.image is not None:
            self.service_client_image(packet.image)

    def on_client_configuration_received(self, client, packet: VSNPacket.ConfigurationPacketToServer):
        self.log('Received client configuration')
        client.id = packet.node_id
        self.__add_new_camera(client)

    def service_client_image(self, image_as_string: str):
        data = np.fromstring(image_as_string, dtype='uint8')
        # decode jpg image to numpy array and display
        decimg = cv2.imdecode(data, cv2.IMREAD_GRAYSCALE)

        qi = QtGui.QImage(decimg, 320, 240, QtGui.QImage.Format_Indexed8)
        self.label_image.setPixmap(QtGui.QPixmap.fromImage(qi))

    def service_client_data(self, white_pixels, activation_level, client):
        activation_neighbours = self.__cameras.update_state(client.id, activation_level, white_pixels)

        packet_to_send = VSNPacket.DataPacketToClient(activation_neighbours)
        client.send(packet_to_send)

        self.__graphs_controller.set_new_values(
            client.id,
            activation_level + activation_neighbours,
            white_pixels
        )

        self.__update_status_monitor(client.id)

    def log(self, msg):
        timestamp = '[%010.3f]' % time.clock()
        self.log_widget.append(timestamp + ' ' + str(msg))

    def closeEvent(self, e):
        if not self.__no_clients_left:
            self.__exit_requested = True
            self.__server.send_to_all_clients(VSNPacket.DisconnectPacket())
        else:
            self.__server.stop()
            self.__plot_timer.stop()
            self.__graphs_controller.close()
            self.__event_loop.stop()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    main_window = SampleGUIServerWindow(loop)
    main_window.show()

    loop.run_forever()
    loop.close()
